import { useEffect, useState } from "react";
import Head from "next/head";
import { Box, Button, Stack } from "@mui/material";
import styled from "@emotion/styled";
import { PrismLight as SyntaxHighlighter } from "react-syntax-highlighter";
import json from "react-syntax-highlighter/dist/cjs/languages/prism/json";
import { nightOwl } from "react-syntax-highlighter/dist/cjs/styles/prism";

SyntaxHighlighter.registerLanguage("json", json);

const Main = styled.main`
  display: flex;
  flex-direction: column;
  align-items: center;
`;

interface WebSocketMessage {
  key: string;
  data: unknown;
}

interface Cache {
  [key: string]: unknown;
}

export default function Home() {
  const [cache, setCache] = useState<Cache>({});
  const [activeKey, setActiveKey] = useState<string | null>(null);

  useEffect(() => {
    const ws = new WebSocket("ws://localhost:3001");

    ws.onopen = () => {
      console.log("WebSocket connected");
    };

    ws.onmessage = (ev) => {
      console.log("WebSocket message: ", ev.data);

      const message: WebSocketMessage = JSON.parse(ev.data);

      setCache((prev) => ({
        ...prev,
        [message.key]: message.data,
      }));

      if (!activeKey) {
        setActiveKey(message.key);
      }
    };

    ws.onerror = (error) => {
      console.log("WebSocket error: ", error);
    };

    ws.onclose = () => {
      console.log("WebSocket disconnected");
    };

    return () => {
      ws.close();
    };
  }, []);

  console.log({
    cache,
  });

  return (
    <>
      <Head>
        <title>Hive Inspector</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <link
          rel="preload"
          href="/fonts/FiraCode-Bold.ttf"
          as="font"
          crossOrigin="anonymous"
        />
        <link
          rel="preload"
          href="/fonts/FiraCode-Light.ttf"
          as="font"
          crossOrigin="anonymous"
        />
        <link
          rel="preload"
          href="/fonts/FiraCode-Medium.ttf"
          as="font"
          crossOrigin="anonymous"
        />
        <link
          rel="preload"
          href="/fonts/FiraCode-Regular.ttf"
          as="font"
          crossOrigin="anonymous"
        />
        <link
          rel="preload"
          href="/fonts/FiraCode-SemiBold.ttf"
          as="font"
          crossOrigin="anonymous"
        />
      </Head>
      <Main>
        <Box padding={4}>
          <Stack direction="row" justifyContent="center">
            {Object.entries(cache).map(([key, _data]) => (
              <div key={key}>
                <Button
                  variant={key === activeKey ? "contained" : "text"}
                  onClick={() => setActiveKey(key)}
                >
                  {key}
                </Button>
              </div>
            ))}
          </Stack>
          {activeKey && (
            <SyntaxHighlighter language="json" style={nightOwl}>
              {JSON.stringify(cache[activeKey], null, 2)}
            </SyntaxHighlighter>
          )}
        </Box>
      </Main>
    </>
  );
}
